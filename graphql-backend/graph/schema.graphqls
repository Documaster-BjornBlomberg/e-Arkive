# GraphQL schema
#
# https://gqlgen.com/getting-started/

type Todo {
  id: ID!
  text: String!
  done: Boolean!
  user: User!
}

type User {
  id: ID!
  name: String!
  username: String!
  settings: [UserSetting]
  groups: [Group]
}

type Group {
  id: ID!
  name: String!
  members: [User]
}

type UserSetting {
  id: ID!
  key: String!
  value: String!
  createdAt: String!
  updatedAt: String!
}

type Node {
  id: ID!
  name: String!
  parentId: ID
  createdAt: String!
  updatedAt: String!
  children: [Node]
  parent: Node
  files: [File]
  ownerUserId: ID
  ownerGroupId: ID
  ownerUser: User
  ownerGroup: Group
  permissions: Int!
}

type AuthPayload {
  token: String!
  user: User!
}

type Query {
  getFiles: [File!]!
  getFile(id: ID!): File
  downloadFile(id: ID!): File
  getFilesByNodeId(nodeId: ID!): [File!]!
  getRootNodes: [Node!]!
  getNodeById(id: ID!): Node
  getChildNodes(parentId: ID!): [Node!]!
  hello: String!
  me: User
  getUserSettings: [UserSetting]
  getUserSetting(key: String!): UserSetting
  getGroups: [Group!]!
  getGroup(id: ID!): Group
  getUserGroups: [Group!]!
  getUserById(id: ID!): User
  getUsers: [User!]!
}

type Mutation {
  saveFile(input: FileInput!): File!
  deleteFile(id: ID!): Boolean!
  updateMetadata(fileId: ID!, metadataInput: [MetadataInput]!): File!
  deleteMetadata(fileId: ID!, keys: [String!]!): File!
  moveFile(fileId: ID!, nodeId: ID!): File!
  createNode(input: NodeInput!): Node!
  updateNode(id: ID!, input: NodeUpdateInput!): Node!
  deleteNode(id: ID!): Boolean!
  moveNode(id: ID!, newParentId: ID!): Node!
  login(username: String!, password: String!): AuthPayload!
  logout(token: String!): Boolean!
  register(username: String!, password: String!): AuthPayload!
  updatePassword(currentPassword: String!, newPassword: String!): Boolean!
  saveUserSetting(key: String!, value: String!): UserSetting!
  deleteUserSetting(key: String!): Boolean!
  createGroup(name: String!): Group!
  updateGroup(id: ID!, name: String!): Group!
  deleteGroup(id: ID!): Boolean!
  addUserToGroup(userId: ID!, groupId: ID!): Boolean!
  removeUserFromGroup(userId: ID!, groupId: ID!): Boolean!
  setNodePermissions(nodeId: ID!, permissions: Int!): Node!
  setNodeOwnership(nodeId: ID!, ownerUserId: ID, ownerGroupId: ID): Node!
  createUser(username: String!, password: String!, name: String): User!
  updateUser(id: ID!, username: String, name: String): User!
  updateUserPassword(userId: ID!, newPassword: String!): Boolean!
  deleteUser(id: ID!): Boolean!
}

type File {
  id: ID!
  name: String!
  size: Int!
  contentType: String!
  createdAt: String!
  fileData: String
  metadata: [Metadata]
  nodeId: ID
  node: Node
}

type Metadata {
  key: String!
  value: String!
}

input FileInput {
  name: String!
  size: Int!
  contentType: String!
  fileData: String!
  metadata: [MetadataInput]
  nodeId: ID
}

input MetadataInput {
  key: String!
  value: String!
}

input NodeInput {
  name: String!
  parentId: ID
  ownerUserId: ID
  ownerGroupId: ID
  permissions: Int
}

input NodeUpdateInput {
  name: String
  parentId: ID
  ownerUserId: ID
  ownerGroupId: ID
  permissions: Int
}
